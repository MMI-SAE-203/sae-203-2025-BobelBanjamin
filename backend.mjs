import PocketBase from 'pocketbase';

const pb = new PocketBase('https://sae203.banjamin-bobel.com/_/');

/**
 * üìå Retourne la liste de tous les films tri√©s par date de projection
 */
export async function allFilms() {
    let films = await pb.collection('film').getFullList({ sort: '-sortie' });

    films = films.map((film) => {
        if (film.affiche) {
            film.imgUrl = pb.files.getURL(film, film.affiche); 
        }
        return film;
    });

    return films;
}

/**
 * üìå Retourne la liste de toutes les activit√©s tri√©es par date
 */
export async function allActivites() {
    let activites = await pb.collection('activites').getFullList({ sort: '-date_act' });

    activites = activites.map((activite) => {
        if (activite.photo) {
            activite.imgUrl = pb.files.getURL(activite, activite.photo); 
        } else {
            activite.imgUrl = "/default-activity.png"; 
        }
        return activite;
    });

    return activites;
}

/**
 * üìå Retourne la liste de tous les invit√©s tri√©s par ordre alphab√©tique
 */
export async function allInvites() {
    let invites = await pb.collection('invite').getFullList({ sort: 'nom' });

    invites = invites.map((invite) => {
        if (invite.photo) {
            invite.imgUrl = pb.files.getURL(invite, invite.photo); 
        } else {
            invite.imgUrl = "/default-avatar.png"; 
        }
        return invite;
    });

    return invites;
}

/**
 * üìå Retourne les infos d'un film en donnant son ID
 */
export async function getFilm(id) {
    let film = await pb.collection('film').getOne(id);
    if (film.affiche) {
        film.imgUrl = pb.files.getURL(film, film.affiche); 
    }
    return film;
}

/**
 * üìå Retourne les infos d'une activit√© en donnant son ID
 */
export async function getActivite(id) {
    let activite = await pb.collection('activites').getOne(id);
    if (activite.photo) {
        activite.imgUrl = pb.files.getURL(activite, activite.photo);  // ‚úÖ V√©rifie cette ligne !
    } else {
        activite.imgUrl = "/default-activity.png";  // ‚úÖ Image par d√©faut si besoin
    }
    return activite;
}
export async function getInvite(id) {
    let invite = await pb.collection('invite').getOne(id, { expand: "activites,films" });

    console.log("üîç Invite r√©cup√©r√© depuis PocketBase:", invite);

    // ‚úÖ V√©rifie si les activit√©s sont bien r√©cup√©r√©es
    invite.activites = invite.expand?.activites || [];
    console.log("üìå Activit√©s trouv√©es :", invite.activites);

    // ‚úÖ V√©rifie si les films sont bien r√©cup√©r√©s
    invite.films = invite.expand?.films || [];
    console.log("üé¨ Films trouv√©s :", invite.films);

    // G√©n√©ration de l'URL de l'image
    invite.imgUrl = invite.photo 
        ? pb.files.getURL(invite, invite.photo) 
        : "/default-avatar.png";

    return invite;
}




/**
 * üìå Retourne toutes les activit√©s d‚Äôun invit√© donn√© par son ID
 */
export async function getActivitesByInviteId(id) {
    let activites = await pb.collection('activites').getFullList({
        filter: `invites.id="${id}"`
    });

    return activites;
}

/**
 * üìå Retourne toutes les activit√©s d‚Äôun invit√© donn√© par son nom
 */
export async function getActivitesByInviteNom(nom) {
    let invites = await pb.collection('invite').getFullList({
        filter: `nom="${nom}"`
    });

    if (invites.length === 0) {
        throw new Error('Aucun invit√© trouv√©');
    }

    let activites = await pb.collection('activites').getFullList({
        filter: `invites.id="${invites[0].id}"`
    });

    return activites;
}

/**
 * üìå Ajoute ou met √† jour un film, une activit√© ou un invit√©
 */
export async function updateItem(collection, id, data) {
    if (!['film', 'activites', 'invite'].includes(collection)) {
        throw new Error('Collection non valide');
    }

    let result;
    if (id) {
        result = await pb.collection(collection).update(id, data);
    } else {
        result = await pb.collection(collection).create(data);
    }

    return result;
}

export { pb };

export async function addFilm(data) {
    try {
        const result = await pb.collection("film").create(data);
        console.log("‚úÖ Film ajout√© :", result);
        return result;
    } catch (error) {
        console.error("‚ùå Erreur lors de l'ajout du film :", error);
        throw error;
    }
}
